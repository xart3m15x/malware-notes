\\ assembly, oh boy
\\ Art of Assembly by Randall Hyde
- OS creates a layer of abstraction to communicate with the hardware without it being as complex
- Malware authors create malware using a high-level language
  - uses a compiler to generate it into machine code so the CPU can understand
- Reverse engineers analyze malware using a low-level language
  - uses a decompiler to generate it into machine code to figure out how it operates

Six Levels of Abstraction:
- Hardware
  - The only physical level
    - Consists of electrical circuits that implement complex combinations of logical operations
      - i.e. XOR, AND, OR, NOT gates
        - known as digital logic
  - Most portable level across computer systems
  - Cannot be easily manipulated by software
- Microcode
  - AKA firmware
  - Only operates on the exact circuitry for which it was designed
  - Contains microinstructions that translate from higher machine-code to provide an interface with the hardware
  - Specific to the computer hardware it was written on
- Machine Code
  - Contains opcodes
    - Hexadecimal digits that tell the processor what you want it to do
  - Implemented with severl microcode instructions so that the underlying hardware can execute the code
  - Created when a computer program in a high-level language is compiled
- Low-Level Languages
  - Human-readable version of a computers architecture's instruction set
  - Most common is assembly
  - Use this because machine code is too difficult for a human to comprehend
  - Use a disassembler to generate low-level language
    - Uses mnemonics (i.e. jmp, mov)
  - Dialects of assembly
- High-Level Languages
  - Mostly computer programmers operate at high-level languages
  - Provide strong abstraction from the machine level
  - Make it easy to use programming logic and flow-control mechanisms
  - Includes C, C++
  - Turned into machine code by a compiler through a process called compilation
- Interpreted Languages
  - Top level, which means they are the least portable
  - Includes C#, Perl, .NET, Java
  - Not compiled into machine code, translated into bytecode
    - Bytecode is an intermediate representation that is specific to the programming language
    - Bytecode executes within an interpreter
      - Program that translates bytecode into executable machine code on the fly at runtime
      - Interpreters provide automatic level of abstraction compared to traditionally compiled code
        - Can handle errors and memory management on it's own, independent from the OS

Reverse Engineering
- When malware is stored on a disk, it is in binary form at the machine code level
- Dialects of Assembly include
  - x86, x64, SPARC, PowerPC, MIPS, ARM, etc.
- 32-bit personal computers are x86, AKA Intel IA-32
  - All modern 32-bit versions of Windows are designed to run on x86 architecture
  - Most AMD64 or Intel 64 architectures support x86 32-bit binaries
- Internals of all computers follow the Von Neumann architecture:
  - CPU executes code
  - RAM stores all data and code
  - I/O interfaces with devices (i.e. hard drives, keyboards, monitors, etc.)
- CPU has 3 components:
  - Registers
  - Control Unite
  - ALU (Arithmetic Logic Unit)
- Control unit gets instructions to execute from RAM using the register (the instruction pointer)
  - Stores the address of the instruction to execute
- Registers are the CPU's basic data storage so it doesn't need to access RAM
- ALU executes an instruction fetched from the RAM and places the results in registers or memory
- RAM can separated in 4 sections:
  - Data (Highest memory address)
    - Contains values that are put in place when a program is initially loaded
    - May be called static values since they typically do not change while the program is running
    - May also be called global values since they are accessible to any part of the program
  - Code
    - Contains the instructions fetched by the CPU to execute the program's tasks
    - Controls what the program does and how the program will be orchestrated
  - Heap
    - Used for dynamic memory during the execution
    - Also used to create/allocate new values
    - And eliminate/free values that the program no longer needs
  - Stack (Lowest memory address)
    - Used for local variables and parameters for functions
    - Also used to help control program flow
- Instructions are made of a mnemonic and zero or more operands
  - Mnemonic is a word that identifies the instruction to execute
  - Operands are typically used to identify information used by the instruction (i.e. registers or data)
- Instructions corresponds to opcodes (operation codes)
  - Tells the CPU which operation the program wants to perform
  - Intel defines opcodes more specifically, but basically is machine instruction
- Disassemblers translate opcodes into human-readable instructions
