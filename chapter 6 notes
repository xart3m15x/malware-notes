//recognizing c code constructs in assembly
//look at this chapter to see all the examples of each

- Malware is typically developed using a high-level language, most commonly C
- Code contrust is a code abstraction level that defines a functional property but not the details of its implementation
  - I.E. loops, if statements, linked lists, switch statements, etc.
- Want to learn more C, read The C Programming Language by Brian Kernighan and Dennis Ritchie

Global vs Local Variables
- Global variables can be accessed and used by any function in a program
  - Global variables are referenced by memory addresses
  - Global variable defined in C:
      int x = 1;
      int y = 2;

      void main()
      {
        x = x+y;
        printf("total = %d\n", x);
      }
  - Global variable defined in assembly (with labelling):
    00401003  mov    eax, dword_40CF60
    00401008  add    eax, dword_40C000
    0040100E  mov    dword_40CF60, eax
    00401013  mov    ecx, dword_40CF60
    00401019  push   ecx
    0040101A  push   offset aTotalD  ;"total = %d\n"
    0040101F  call   printf
- Local variables can be accessed only by the function in which they are defined
  - Local variables are referenced by the stack addresses
  - Local variable defined in C:
      void main()
      {
        int x = 1;
        int y = 2;
        
        x = x+y;
        printf("total = %d\n", x);
      }
  - Local variable defined in assembly (with labelling):
    00401006  mov    [ebp+var_4], 1
    0040100D  mov    [ebp+var_8], 2
    00401014  mov    eax, [ebp+var_4]
    00401017  add    eax, [ebp+var_8]
    0040101A  mov    [ebp+var_4], eax
    0040101D  mov    ecx, [ebp+var_4]
    00401020  push   ecx
    00401021  push   offset aTotalD  ;"total = %d\n"
    00401026  call   printf
- Both are declared similarly in C, but look different in assembly

Disassembling Arithmetic Operations
- -- means decrement by 1
- ++ means increment by 1
- % performs the modulo between the two variables
  - modulo -> remainder after performing a division operation

Recognizing if Statements
- Not all conditional jumps correspond to if statements, but there must be a conditional jump for the if statement
- In assembly, only ONE of the two code paths can be taken
- When more code paths are added, assembly gets more complicated

Recognizing Loops
- 
