//recognizing c code constructs in assembly
//look at this chapter to see all the examples of each

- Malware is typically developed using a high-level language, most commonly C
- Code contrust is a code abstraction level that defines a functional property but not the details of its implementation
  - I.E. loops, if statements, linked lists, switch statements, etc.
- Want to learn more C, read The C Programming Language by Brian Kernighan and Dennis Ritchie

Global vs Local Variables
- Global variables can be accessed and used by any function in a program
  - Global variables are referenced by memory addresses
  - Global variable defined in C:
      int x = 1;
      int y = 2;

      void main()
      {
        x = x+y;
        printf("total = %d\n", x);
      }
  - Global variable defined in assembly (with labelling):
    00401003  mov    eax, dword_40CF60
    00401008  add    eax, dword_40C000
    0040100E  mov    dword_40CF60, eax
    00401013  mov    ecx, dword_40CF60
    00401019  push   ecx
    0040101A  push   offset aTotalD  ;"total = %d\n"
    0040101F  call   printf
- Local variables can be accessed only by the function in which they are defined
  - Local variables are referenced by the stack addresses
  - Local variable defined in C:
      void main()
      {
        int x = 1;
        int y = 2;
        
        x = x+y;
        printf("total = %d\n", x);
      }
  - Local variable defined in assembly (with labelling):
    00401006  mov    [ebp+var_4], 1
    0040100D  mov    [ebp+var_8], 2
    00401014  mov    eax, [ebp+var_4]
    00401017  add    eax, [ebp+var_8]
    0040101A  mov    [ebp+var_4], eax
    0040101D  mov    ecx, [ebp+var_4]
    00401020  push   ecx
    00401021  push   offset aTotalD  ;"total = %d\n"
    00401026  call   printf
- Both are declared similarly in C, but look different in assembly

Disassembling Arithmetic Operations
- -- means decrement by 1
- ++ means increment by 1
- % performs the modulo between the two variables
  - modulo -> remainder after performing a division operation

Recognizing if Statements
- Not all conditional jumps correspond to if statements, but there must be a conditional jump for the if statement
- In assembly, only ONE of the two code paths can be taken
- When more code paths are added, assembly gets more complicated

Recognizing Loops
- Loops and repetitive tasks are very common across all software
- for loop is a basic mechanism used in C
  - Has 4 components
    - Initialization
    - Comparison
    - Execution instructions
    - Increment or Decrement
  - In assembly, can be found by looking for the 4 components
  - while loop frequently is used by malware authors to loop until a condition is met
    - I.E. receive a packet or command

Understanding Function Call Conventions
- Function calls can appear differently in assembly code
- Calling conventions goern the way the function call occurs
  - I.E. Order in which parameters are placed on the stack or in registers
  - Whether the caller or the function called (the callee) is responsible for cleaning up the stack when the function is complete
- Depends on a lot, but especially on the compiler
- 3 most common calling conventions:
  - cdecl
    - Parameters are pushed onto the stack from right to left
    - Caller cleans up the stack when the function is complete
    - Return value is stored in EAX
  - stdcall
    - Similar to cdecl
    - Only difference is stdcall requires the callee to clean up the stack when the function is complete
    - add will not be needed
    - Compiled differently
    - Epilogue would need to take care of the cleanup
    - Standard calling convention for Windows API
      - Calling these API functions will not need to clean up the stack
      - Responsibility of the DLLs
  - fastcall
    - Varies the most among compilers
    - First few arguments (typically 2) are passed in registers
      - Most common are EDX and ECX
    - Additional arguments are loaded from right to left
    - Calling function is usually responsible for cleaning up the stack (if necessary)
    - More efficient because the code doesn't need to involve the stack as much
- Push vs. Move
  - Compiler may decide to use move rather than push on a stack

Analyzing switch Statements
- Used by programmers and malware authors to make a decision based on a character or integer
- Backdoors commonly select from a series of actions using a single byte value
- Compiled in 2 common ways:
  - If style
    - Conditional jump determination is made by the comparison that occurs directly before each jump
    - Difficult to tell if it's an if or switch style since both can contain a bunch of cmp and lcc instructions
    - May be multiple ways to represent the same code constructs in assembly
  - Jump style
    - Commonly found with large, contiguous switch statements
    - C code looks similar to if, but drastically different in assembly

Disassembling Arrays
- Arrays are used by programmers to define an ordered set of similar data items
- Malware sometimes uses an array of pointers to strings that contain multiple hostnames that are used as options for connections
- Arrays can be locally defined or globally defined

Identifying Structs
- Structures (AKA structs) are similar to arrays, but comprise elements of different types
- Commonly used by malware authors to group information
- Easier especially if many functions need access to the same group of variables
- Windows API functions often use structures that must be created and maintained by the calling program
- Ability to identify a structure can havea  significant impact on your ability to analyze malware
- IDA Pro can create structures and assign them to memory references using T hotkey

Analyzing Linked List Traversal
- Linked List is a data structure that consists of a sequence of data records
  - Each record includes a field that contains a reference (llink) to the new record in the sequence
- May be preferred to an array since the order of the linked items can differ from the order in which the data items are stored in memory or on disk
- Linked lists allow the insertion and removal of nodes at any point in the list
