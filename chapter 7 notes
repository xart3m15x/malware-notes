//analyzing malicious windows programs

- Most malware target Windows platforms and interacts closely with the OS
- Malware is typically poorly formed and tends to perform unexpected actions

Windows API
- Broad set of functionality that governs the way that malware interacts with the Microsoft libraries
- DWORD represent 32-bit unsigned integers
- WORD represent 16-bit unsigned integers
- Standard C types like int, short, and unsigned int are not normally used
- Hungarian notation for API function identifiers
  - Uses a prefix naming scheme that makes it easy to identify a variable's type
  - Variables that contain a 32-bit unsigned integer (DWORD) start with dw
    - I.E. dwSize
- Most common Window API types
  - WORD (w)
    - a 16-bit unsigned value
  - DWORD (dw)
    - a double-WORD, 32-bit unsigned value
  - Handles (H)
    - Reference to an object
    - Information stored here is not documented
    - Handle should be manipulated only by the Windows API
  - Long Pointer (LP)
    - Pointer to another type
    - Strings are usually prefixed with LP (LPSTR) because they are actually pointers
    - Sometimes will see Pointer (P)
    - Difference was only meaningful in 16-bit systems
   - Callback
    - Represents a function that will be called by the Windows API
- Handles are items that have been opened or created in the OS
  - I.E. a window, process, module, etc.
  - Similar to pointers in that they refer to an object or memory location somewhere else
    - BUT cannot be used in arithmetic operations
    - Also do not always represent the object's address
- Some functions return handles that represent values that can be used as pointers or arithmetic values
- Most common way that malware interacts with the system is by creating or modifying files
  - I.E. if malware creates a file and stores web-browsing habits in that file, the program is probably some form of spyware
  - Functions for accessing the file system:
    - CreateFile
      - Create and open files
      - Can open existing files, pipes, streams, and I/O devices
      - dwCreationDisposition controls whether the CreateFile function creates a new file or opens an existing one
    - ReadFile and WriteFile
      - Reading and writing to files
      - Both operate on files as a stream
      - When ReadFile is called, it reads only the first several bytes from a file
        - Once it is called again, it reads the next several bytes of the file, etc.
    - CreatefileMapping and MapViewOfFile
      - File mappings are commonly used by malware authors because they allow a file to be loaded into memory and manipulated easily
      - CreateFileMapping function loads a file from disk into memory
      - MapViewOfFile returns a pointer to the base address of the mapping
        - Can be used to access the file in memory
        - Can also read/write anywhere in the file
      - Commonly used to replicate the functionality of the Windows loader
        - Malware can parse the PE header and make changes to the file in memory
          - Causes the file to be executed as if it had been loaded by the OS loader
- Windows has a number of file types that can be accessed like regular files, but are not accessed by drive letter/folder
  - Malware often uses special files
  - Some special files can be stealthier because they don't show up in directory listings
  - Can also provide greater access to system hardware and internal data
  - Can be passed as strings to any of the file-manipulation functions and run on a file as if it were a normal file
- Namespaces can be thought of as a fixed number of folders, each storing different types of objects
  - To browse Namespaces, use WinObj Object Manager namespace viewer
  - Win32 device namespace (predix \\.\) is often used by malware to access physical devices directly and read/write them like a file
    - Allows it to modify the disk in ways that are not possible through the normal API
  - Another example is \Device\PhysicalMemory which allows malware to access physical memory directly
    - This allows user-space programs to write to kernel space
    - After Windows 2003 SP1, inaccessible from user space
      - But can still get into \Device\PhysicalMemory from kernel space
        - Used to access low-level information such as BIOS code and config
- Alternate Data Streams (ADS) feature allows additional data to be added to an existing file within NTFS
  - Essentially adding one file to another
  - Extra data does not show up in a directory listing or displaying the contents of the file
    - Only visible when you access the stream
  - Used to hide data
  - Naming convention: normalFile.txt:Stream:$DATA

Windows Registry
- Used to store OS and program config information, I.E. settings and options
- Early versions of Windows used .ini files to store config information
  - Created as a heirarchal database of information to improve performance
  - Nearly all windows config informarion is stored in the registry, including startup, networking, driver, user account, etc.
- Malware uses this for persistence or config data
- Important registries:
  - Root Key
    - Divided into 5 top-level sections cal root keys
    - HKEY and hive are sometimes used
    - Some keys are virtual keys that provide a way to reference the underlying registry information
      - I.E. HKCU is stored in HKEY_USERS\SID, where SID is the security identifier of the user loggin in
      - I.E. HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run contains a series of values that are executables
        - HKEY_LOCAL_MACHINE stores the subkeys SOFTWARE, Microsoft, Windows, CurrentVersion, and Run
    - Registry root keys:
      - HKEY_LOCAL_MACHINE (HKLM)
        - Stores settings that are global to the local machine
        - 1/2 most commonly used
      - HKEY_CURRENT_USER (HKCU)
        - Stores settings specific to the current user
        - 1/2 most commonly used
      - HKEY_CLASSES_ROOT
        - Stores information defining types
      - HKEY_CURRENT_CONFIG
        - Stores settings about the current hardware config
        - Specifically differences between the current and the standard config
      - HKEY_USERS
        - Defines settings for the default user, new users, and current users
  - Subkey
    - Like a subfolder in a folder
  - Key
    - Folder in the registry that can contain additional folders or values
    - Root keys and Subkeys are both keys
  - Value Entry
    - Ordered pair with a name and value
  - Value or Data
    - Data stored in a registry entry
- Registry Editor (RegEdit) is a built-in Windows tool used to view and edit the registry
- Writing entries to the Run subkey is a well-known way to set up software to run automatically
- Autoruns tool lists code that will run automatically when the OS starts
  - Check ~25-30 locations
  - Lists executables, DLLs loaded into programs, and Drivers loaded into the Kernel
- Most common registry functions malware will often use:
  - RegOpenKeyEx
    - Opens a registry for editing and querying
    - Doesn't need to open the file first
    - Common for a lot of programs to use
  - RegSetValueEx
    - Adds a new value to the registry and sets its data
  - RegGetValue
    - Returns the data for a value entry in the registry
  - If these are seen in malware, should identify the registries its accessing
- Files with .reg extension contain human-readable registry data
  - When opened, automatically modifies the registry by merging the information into the registry
  - Malware sometimes uses .reg files to modify the registry, but more often directly edits the registry programatically

Networking APIs
- Malware commonly relies on network functions
- Most commonly uses Berkeley compatible sockets which are nearly identical to UNIX and Windows systems
- Most common Berkeley Compatible Sockets
  - socket
    - Creates a socket
  - bind
    - Attaches a socket to a particular port, prior to the accept call
  - listen
    - Indicates that a socket will be listening for incoming connections
  - accept
    - Opens a connection to a remote socket and accepts the connection
  - connect
    - Opens a connect to a remote socket
    - Remote socket must be waiting for the connection
  - recv
    - Recieves data from the remote socket
  - send
    - Sends data to the remote socket
- WSAStartup function must be called before any other networking functions in order to allocate resources for the networking libraries
- Always 2 sides to a networking program:
  - Server side maintains an open socket waiting for incoming connections
    - See a socket, bind, listen, and accept functions called in that oder, followed by send and recv as necessary
  - Client side connects to a waiting socket
    - See a socket call followed by a connect call, followed by send and recv as necessary
  - Malware can be either of these
- Realistic examples of server socket program will be littered with WSAGetLastError and other error-handling functions
- WinINet API function is stored in Wininet.dll
  - Higher-level API
  - InternetOpen
    - Used to initialize a connection to the internet
  - InternetOpenUrl
    - Used to connect to a URL (Which can be HTTP or FTP)
  - InternetReadFile
    - Works like ReadFile, allowing the progtam to read data from a file downloaded from the Internet

Following Running Malware
- Most common way to access code outside a single file is through DLLs
  - DLLs (Dynamic Link Libraries) are used to share code among multiple applications
  - Executable file that does not run alone
  - Static libraries were the standard prior to DLLs and still exist, but much less common
  - Advantage of DLLs is that the memory used by the DLLs can be shared among running processes
    - Static libraries would take up twice as much memory
  - Another advantage is DLLs is that you can use known DLLs on host Windows systems without needing to redistribute them
    - Helps minimize the size of software distributions
- Malware writes use DLLs in 3 ways:
  - Store Malicious Code
    - Uses DLLs to load itself into another process
  - Using Windows DLLs
    - Nearly all malware uses the basic Windows DLLs found on every system
  - Using 3rd-party DLLs
    - May need a DLL that is not already installed on the victim's machine
    - I.E. might use Mozilla Firefox DLL to connect back to a server
- DLLs use the PE file format, and only a single flag indicate that the file is a DLL
  - DLLs often have more exports and generally fewer imports
  - Other than that, there's no real difference between a DLL and an exe
- Main DLL function is DllMain
  - Specified in the PE header as a file's entry point
  - Called to notify the DLL whenever a process loads or unloads the library, creates a new thread, or finishes an existing thread
  - Allows the DLL to manage any per-process or per-thread resources
- Most DLLs do not have per-thread resources and ignore calls to DLLMain that are caused by thread activity
- Malware can also execute code outside the current program by creating a new process or modifying an existing one
  - Process is a program being executed by Windows
    - Manages its own resources, such as open handles and memory
    - Contains 1+ threads that are executed by the CPU
  - Newer malware commonly executes its code as part of another process
  - Usually at least 20-30 processes running on a Windows system at a time
    - All share the same resources, including CPU, file system, memory, and hardware
    - Keeps separate programs from interferring with each other
    - Each process is given a memory space that is separate from all other processes
- CreateProcess function most commonly used by malware to create a new process
  - Has many parameters
  - Caller has a lot of control over how it will be created
  - I.E. create a process to execute malicious code to bypass firewalls and other security mechanisms
  - Most often used to create a simple remote sshell with just a single function call
  - STARTUPINFO is one of the parameters to the function
    - Includes a handle to the standard input, output, and error streams for a process
    - Malware could set these values to a socket to execute a shell remotely
    - Find remote host, need to determine where the socket is initalized
  - Often malware will create a new process by storing one program inside another in the resource section
    - Extract the additional executable from the PE header, write it to disk, and then call CreateProcess to run the program

