
- ascii strings use 1 byte per character, meanwhile unicode uses 2 bytes per character
- dll contains executable code that is shared among multiple applications
- if something is a few strings, probably packed/obfuscated, which means it probably is malicious
  - packed/obfuscated code will often include at least the functions LoadLibrary and GetProcAccess
- PEiD good to use to detect the type of packer/compiler

Linking:
- Static Linking
  - least commonly used method of linking libraries
  - common in UNIX/Linux programs
  - code in library is linked to an executable, which grows in size
- Runtime linking
  - commonly used in malware
    - especially when packed/obfuscated
  - connect to libraries only when function is needed
-Dynamic Linking
  - Most common
  - OS searches for necessary libraries when loaded
  - executes within the library
- Common DLLs: LdrGetProcAccess, LdrLoadDll, LoadLibrary, GetProcAccess

Common DLLs:
  - Kernell32.dll
    - access/manipulation of memory, files, and hardware
  - Advapi32.dll
    - Accesses service manager and registry
  - User32.dll
    - user-interface components, i.e. buttons, scroll bars, etc.
  - Gdi32.dll
    - Displaying and manipulating graphics
  - Ntdll.dll
    - Windows kernell
    - Executable do not import this file directly, typically imported indirectly with Kernell32.dll
    - If imported directly, author wants certain unavailable from Windows programs
      - i.e. hiding functionality or manipulating processes
  - WSock32.dll/Ws2_32.dll
    - networking DLLs
  - Wininet.dll
    - higher-level networking fuctions (i.e. FTP, HTTP, NTP)
    
- See documented windows API usage through Microsoft Developer Network (MSDN) library
- Executables are not designed to provide functionality for other executables
  - Exported functions are rare
- If malware uses exports, will omit names entirely or use unclear/misleading names

- SetWindowsHookEx API is commonly used for spyware
  - Keyloggers can recieve keyboard inputs
- RegisterHotKey API notifies the application when a hotkey is used (i.e. Copy/Paste, Shift, etc.)

PE File Headers/Sections
  - .text
    - contains the instructions that the CPU executes
  - .rdata
    - contains import/export information
  - .data
    - accessible anywhere in the program (for icons, images, menus, strings, etc.)
  - .rsrc
    - contains resources used by the executable that are not considered part of the executable
  - .data
    - stores global data accessed throughout the program
  - .idata
    - stores import function information
    - if not present, stored in the .rdata
  - .edata
    - stores export function information
    - if not present, stored in the .rdata
  - .pdata
    - presents only 64bit executables and stores exception-handling information
  - .reloc
    - contains information for relocation of library files
- All these can vary among compilers (Delphi will use CODE instead of .text)

- IMAGE_DOS_HEADER and MS-DOS Stub Program offer little/no information
- Time Date Stamp tells us when the executable was compiled (useful for things like Delphi, which will always be June 19th, 1992)
  - Also can be easily faked
- IMAGE_OPTIONAL_HEADER has several important factors
  - Subsystem indicates whether this is a console or GUI program
    - Console programs have the value IMAGE_SUBSYSTEM_WINDOWS_CUI, run inside a command window
    - GUI programs have the value IMAGE_SUBSYSTEM_WINDOWS_GUI, run within the Windows system
    - Could even have things like Native or Xbox, less common
- IMAGE_SECTION_HEADER has the most interesting information
  - Compiler creates and names these sections, should be consistent, and if not then it is suspicious
- Virutal Size tells us how much space is allocated
  - Raw data shows how much is on the disk
  - If different, then definitely suspicious (i.e. VS is larger than RD, probably is packed code, especially if .text section is larger in memory than on disk)
